                        INITIALISATION ET COMMIT

# git init : initialise le dossier courant comme repository git

# git add nomfichier : ajoute un fichier à l'index du repository
# git add . : ajoute tous les fichiers du dossier courant à l index

# git commit -m "message": enregistre les modifs du repository et ajoute un message

# git log : affiche l'historique des commit, ligne du haut : dernier commit réalisé, ligne du bas : 1er commit
# infos visibles du log : SHA : id unique du commit / auteur / date du commit / message
# la touche q permet de quitter le log

# git commit -a -m "message" : met a jour tous les fichiers existants préalablement ajoutés à l'index

# git checkout SHAducommit : permet de se repositionner sur le commit choisi
# git checkout master : repositionne au commit principal (le plus récent)

# git revert SHAducommit : créé un nouveau commit qui annule les mises à jour du commit précedent

# git commit --ammend -m "message" : remplace le message du dernier commit

# git reset --hard : annule tous les changements non commités

                        ECHANGES AVEC GITHUB

# git clone https://url : récupère sur mon pc le projet souhaité. L url est disponible sur le site github, bouton clone/download

# git push origin master : envoi sur le remote (lieu de sauvegarde) d'origine github le repository master

# git pull origin master : récupère les dernières modifications depuis github

# git status : indique si le repository en cours nécessite un commit

# git remote add origin https://url : permet d'indiquer au repository en cours qu'il doit utiliser l'url fournie par github comme endroit de sauvegarde

                            UTILISATION DES BRANCHES

# Quand on initialise un repository git, notre code est placé par défaut sur la branche master

# git branch : affiche les branches du repository courant. une * devant une branche indique la branche sur laquelle on est actuellement positionné

# git branch nombranche : créé une nouvelle branche

# git checkout nombranche : nous positionne sur la nouvelle branche

# git checkout -b nombranche : créé une nouvelle branche et nous positionne dessus

# git merge nombranche : fusionne la branche sur laquelle on est placé avec la branche nombranche
# il faut régulièrement remettre les modifications faites sur les différentes branches dans la branche master

# un conflit peut survenir lors de la fusion de 2 branches, si le même fichier a été modifié sur chaque branche.
# le conflit ser indiqué sur le fichier par git. Il faut le résoudre et faire un commit -a une fois qu'il est résolu.

                        SAVOIR QUI A MODIFIE UN fichier

# git blame nomfichier.ext : affiche l'historique des modifications  d'un avec l'identité de la personne l'ayant modifié et le debut du SHA du commit.

# git show debutduSHA : donne les détails du commit choisi

                        IGNORER DES fichiers

# Les fichiers temporaires, de configuration ou créés par l'IDE doivent être ignorés par git

# pour ignorer des fichiers, il faut crééer un fichier .gitignore, écrire le nom de fichiers à ignorer (leur chemin s'ils ne sont pas dans le même dossier) et l'ajouter à l'index